generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(uuid())
  name  String
  email String  @unique
  image String?

  passwordHash String @map("password_hash")

  type UserType @default(DEFAULT)

  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

enum UserType {
  DEFAULT
  ADMIN
}

model Settings {
  id String @id @default(uuid())

  // saveScore  Boolean @default(true) @map("save_score")
  // saveReport Boolean @default(true) @map("save_report")
  // saveVote   Boolean @default(false) @map("save_vote")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model Member {
  id String @id @default(uuid())

  visionId  String? @map("vision_id")
  name      String
  cleanName String  @map("clean_name")
  register  String?

  sessionId String  @map("session_id")
  session   Session @relation(fields: [sessionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  tickets Ticket[]
}

model Session {
  id String @id @default(uuid())

  name String @unique

  type SessionType

  createdAt DateTime @default(now()) @map("created_at")

  members Member[]

  @@map("sessions")
}

enum SessionType {
  LOBINHO
  ESCOTEIRO
  SENIOR
  PIONEIRO
  OUTRO
}

model Ticket {
  id String @id @default(uuid())

  number Int @unique

  memberId String? @map("member_id")
  member   Member? @relation(fields: [memberId], references: [id])

  name        String?
  phone       String?
  description String?

  deliveredAt DateTime? @map("delivered_at")

  createdAt DateTime      @default(now()) @map("created_at")
  created   TicketCreated @default(ONTHELOT) @map("created")

  @@map("tickets")
}

enum TicketCreated {
  ONTHELOT
  AFTERIMPORT
}
